def quickfixVersion = "1.7.0-SNAPSHOT"
def artioJavaVersion = '1.8'

defaultTasks 'clean', 'build'

ext {
    group = fixGroup
    version = fixVersion
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://repo.marketcetera.org/maven"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    group = fixGroup
    version = fixVersion

    checkstyle.toolVersion = "9.2"

    tasks.withType(JavaCompile) {
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.encoding = 'UTF-8'
        options.deprecation = true
    }
    
    dependencies {
        implementation "uk.co.real-logic:artio-codecs:${fixVersion}"

        testImplementation 'org.hamcrest:hamcrest:2.2'
        testImplementation 'org.mockito:mockito-core:4.1.0'
        testImplementation 'junit:junit:4.13.2'
        testImplementation "org.quickfixj:quickfixj-messages-fix42:${quickfixVersion}"
        testImplementation "org.quickfixj:quickfixj-messages-fix44:${quickfixVersion}"
        testImplementation "org.quickfixj:quickfixj-messages-fix50:${quickfixVersion}"
        testImplementation "org.quickfixj:quickfixj-core:${quickfixVersion}"
        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation 'org.apache.mina:mina-core:2.1.2'
        testImplementation "uk.co.real-logic:artio-core:${fixVersion}"

        testImplementation group: 'uk.co.real-logic', name: 'artio-core', version: "${fixVersion}", classifier: 'tests'
        testImplementation group: 'uk.co.real-logic', name: 'artio-system-tests', version: "${fixVersion}", classifier: 'tests'
    }

    test {
        testLogging {
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests," +
                    " ${result.successfulTestCount} successes," +
                    " ${result.failedTestCount} failures," +
                    " ${result.skippedTestCount} skipped)"
                }
            }
        }

        beforeTest { desc ->
            if (System.properties["printTestNames"] != null) {
                print "Executing test ${desc.name} [${desc.className}]"
            }
        }

        afterTest { desc, result ->
            if (System.properties["printTestNames"] != null) {
                println " with result: ${result.resultType}"
            }
        }
    }

    configurations {
        tests
    }

    configurations.all {
        exclude module: 'artio-session-codecs'
        exclude module: 'artio-session-fixt-codecs'
    }

    test {
        systemProperties(
            'java.net.preferIPv4Stack': true,
            'fix.codecs.reject_unknown_field': true
        )
    }
}

project(':test-framework') {
    task testJar(type: Jar, dependsOn: testClasses) {
        archiveClassifier.set('tests')
        archiveBaseName.set("test-${project.archivesBaseName}")
        from sourceSets.test.output
    }

    artifacts {
        archives testJar
        tests testJar
    }
}

def getGeneratedDir(project) {
    file("${project.buildDir}/generated-src")
}

configure([project(':fix-42-codecs'), project(':fix-44-codecs'), project(':fix-50-codecs')]) {
    def generatedDir = getGeneratedDir(project)

    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileGeneratedJava {
        dependsOn 'generateCodecs'
        classpath += sourceSets.main.runtimeClasspath
    }

    jar {
        from("$buildDir/classes/java/generated") {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':fix-42-codecs') {
    checkstyle {
        sourceSets = []
    }

    def generatedDir = getGeneratedDir(project)

    task generateCodecs(type: JavaExec) {
        mainClass.set('uk.co.real_logic.artio.dictionary.CodecGenerationTool')
        classpath = sourceSets.main.runtimeClasspath
        args = [generatedDir, '../../quickfixj/quickfixj-messages/quickfixj-messages-fix42/src/main/resources/FIX42.xml']
        outputs.dir generatedDir
    }
}

project(':fix-44-codecs') {
    checkstyle {
        sourceSets = []
    }

    def generatedDir = getGeneratedDir(project)

    task generateCodecs(type: JavaExec) {
        mainClass.set('uk.co.real_logic.artio.dictionary.CodecGenerationTool')
        classpath = sourceSets.main.runtimeClasspath
        args = [generatedDir, '../../quickfixj/quickfixj-messages/quickfixj-messages-fix44/src/main/resources/FIX44.xml']
        outputs.dir generatedDir
    }
}

project(':fix-50-codecs') {
    checkstyle {
        sourceSets = []
    }

    def generatedDir = getGeneratedDir(project)

    task generateCodecs(type: JavaExec) {
        mainClass.set('uk.co.real_logic.artio.dictionary.CodecGenerationTool')
        classpath = sourceSets.main.runtimeClasspath
        args = [generatedDir, '../../quickfixj/quickfixj-messages/quickfixj-messages-fixt11/src/main/resources/FIXT11.xml;' +
                '../../quickfixj/quickfixj-messages/quickfixj-messages-fix50sp2/src/main/resources/FIX50SP2.xml']
        outputs.dir generatedDir
    }
}

project(':test-fix-42') {
    dependencies {
        implementation project(path: ':fix-42-codecs')
        testImplementation project(path: ':test-framework', configuration: 'tests')
    }
}

project(':test-fix-44') {
    dependencies {
        implementation project(path: ':fix-44-codecs')
        testImplementation project(path: ':test-framework', configuration: 'tests')
    }
}

project(':test-fix-50') {
    dependencies {
        implementation project(path: ':fix-50-codecs')
        testImplementation project(path: ':test-framework', configuration: 'tests')
    }
}

wrapper {
    gradleVersion = '7.3.2'
    distributionType = 'ALL'
}
